{% extends "base.html" %}

{% block title %}Tag Analysis - {{ tag }}{% endblock %}

{% block content %}
<style>
    /* ============================================ */
    /* 🎨 ANIMATIONS & TRANSITIONS */
    /* ============================================ */

    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }

    @keyframes shimmer {
        0% { background-position: -1000px 0; }
        100% { background-position: 1000px 0; }
    }

    /* Page Load Animation */
    .container > * {
        animation: fadeInUp 0.6s ease-out backwards;
    }

    .container > *:nth-child(1) { animation-delay: 0.1s; }
    .container > *:nth-child(2) { animation-delay: 0.2s; }
    .container > *:nth-child(3) { animation-delay: 0.3s; }
    .container > *:nth-child(4) { animation-delay: 0.4s; }
    .container > *:nth-child(5) { animation-delay: 0.5s; }

    /* ============================================ */
    /* 🎨 ENHANCED STAT CARDS */
    /* ============================================ */

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 20px;
        margin: 30px 0;
    }

    .stat-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 25px;
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        cursor: pointer;
    }

    .stat-card::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
        transform: rotate(45deg);
        transition: all 0.6s ease;
    }

    .stat-card:hover::before {
        animation: shimmer 1.5s infinite;
    }

    .stat-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);
    }

    .stat-card.success {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        box-shadow: 0 10px 30px rgba(56, 239, 125, 0.3);
    }

    .stat-card.warning {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        box-shadow: 0 10px 30px rgba(245, 87, 108, 0.3);
    }

    .stat-card.danger {
        background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
        box-shadow: 0 10px 30px rgba(250, 112, 154, 0.3);
    }

    .stat-card.info {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        box-shadow: 0 10px 30px rgba(79, 172, 254, 0.3);
    }

    .stat-icon {
        font-size: 3em;
        margin-bottom: 10px;
        opacity: 0.9;
        animation: pulse 2s infinite;
    }

    .stat-content h3 {
        font-size: 2.5em;
        font-weight: 700;
        margin: 10px 0 5px 0;
        text-shadow: 0 2px 10px rgba(0,0,0,0.2);
    }

    .stat-content p {
        font-size: 1em;
        opacity: 0.95;
        font-weight: 500;
        letter-spacing: 0.5px;
    }

    /* ============================================ */
    /* 🎨 BREADCRUMB ENHANCEMENT */
    /* ============================================ */

    .breadcrumb {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 15px 25px;
        border-radius: 12px;
        margin-bottom: 30px;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.2);
        animation: slideInRight 0.5s ease-out;
    }

    .breadcrumb a {
        color: white;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s ease;
        padding: 5px 10px;
        border-radius: 6px;
    }

    .breadcrumb a:hover {
        background: rgba(255,255,255,0.2);
        transform: translateX(3px);
    }

    .breadcrumb span {
        color: rgba(255,255,255,0.7);
        margin: 0 10px;
    }

    .breadcrumb span:last-child {
        color: white;
        font-weight: 700;
        background: rgba(255,255,255,0.15);
        padding: 5px 15px;
        border-radius: 8px;
    }

    /* ============================================ */
    /* 🎨 ENHANCED BUTTONS */
    /* ============================================ */

    .btn {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    .btn::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        border-radius: 50%;
        background: rgba(255,255,255,0.3);
        transform: translate(-50%, -50%);
        transition: width 0.6s, height 0.6s;
    }

    .btn:hover::before {
        width: 300px;
        height: 300px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
    }

    .btn-secondary {
        background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
        border: none;
        box-shadow: 0 4px 15px rgba(107, 114, 128, 0.3);
    }

    .btn-secondary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(107, 114, 128, 0.5);
    }

    .btn-success {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        border: none;
        box-shadow: 0 4px 15px rgba(56, 239, 125, 0.4);
    }

    /* ============================================ */
    /* 🎨 ENHANCED SECTIONS */
    /* ============================================ */

    .section {
        background: white;
        border-radius: 16px;
        padding: 30px;
        margin: 25px 0;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        border: 1px solid rgba(102, 126, 234, 0.1);
    }

    .section:hover {
        box-shadow: 0 8px 30px rgba(0,0,0,0.12);
        transform: translateY(-2px);
    }

    .section h3 {
        font-size: 1.5em;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 3px solid #667eea;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    /* ============================================ */
    /* 🎨 ENHANCED TABLE */
    /* ============================================ */

    .table-container {
        overflow-x: auto;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 15px rgba(0,0,0,0.05);
    }

    table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }

    thead {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    thead th {
        padding: 18px 15px;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-size: 0.85em;
        border: none;
    }

    thead th:first-child {
        border-top-left-radius: 12px;
    }

    thead th:last-child {
        border-top-right-radius: 12px;
    }

    tbody tr {
        transition: all 0.3s ease;
    }

    tbody tr:hover {
        background: linear-gradient(90deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
        transform: scale(1.01);
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }

    tbody td {
        padding: 16px 15px;
        border-bottom: 1px solid #f3f4f6;
    }

    /* ============================================ */
    /* 🎨 ENHANCED BADGES */
    /* ============================================ */

    .badge {
        padding: 6px 14px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 700;
        display: inline-block;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        transition: all 0.3s ease;
    }

    .badge:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.25);
    }

    .badge-success {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        color: white;
    }

    .badge-warning {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
    }

    .badge-danger {
        background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
        color: white;
    }

    /* ============================================ */
    /* 🎨 TAG ENHANCEMENT */
    /* ============================================ */

    .tag {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 8px 20px;
        border-radius: 25px;
        font-weight: 700;
        display: inline-block;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        font-size: 1.2em;
        letter-spacing: 1px;
        animation: pulse 2s infinite;
    }

    /* ============================================ */
    /* 🎨 FILTER BUTTONS */
    /* ============================================ */

    .filter-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        margin-bottom: 20px;
    }

    .filter-buttons .btn-sm {
        padding: 10px 20px;
        border-radius: 25px;
        border: 2px solid #e5e7eb;
        background: white;
        color: #6b7280;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .filter-buttons .btn-sm:hover {
        border-color: #667eea;
        color: #667eea;
        transform: translateY(-2px);
    }

    .filter-buttons .btn-sm.btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-color: transparent;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }

    /* ============================================ */
    /* 🎨 CHART CONTAINERS */
    /* ============================================ */

    .chart-container {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 2px 15px rgba(0,0,0,0.05);
        margin: 20px 0;
        transition: all 0.3s ease;
    }

    .chart-container:hover {
        box-shadow: 0 4px 25px rgba(0,0,0,0.1);
    }

    /* ============================================ */
    /* 🎨 COMPARISON TOOL */
    /* ============================================ */

    .comparison-tool {
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
        border: 2px solid #667eea;
        border-radius: 16px;
        padding: 25px;
        margin: 25px 0;
    }

    /* ============================================ */
    /* 🎨 LOADING ANIMATION */
    /* ============================================ */

    .loading {
        text-align: center;
        padding: 60px;
        color: #667eea;
        font-size: 1.2em;
        font-weight: 600;
    }

    .loading::after {
        content: '...';
        animation: dots 1.5s steps(4, end) infinite;
    }

    @keyframes dots {
        0%, 20% { content: '.'; }
        40% { content: '..'; }
        60%, 100% { content: '...'; }
    }

    /* ============================================ */
    /* 🎨 CODE BLOCKS */
    /* ============================================ */

    code {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 4px 10px;
        border-radius: 8px;
        font-family: 'Courier New', monospace;
        font-size: 0.9em;
        font-weight: 600;
        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
    }

    /* ============================================ */
    /* 🎨 DASHBOARD HEADER */
    /* ============================================ */

    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding: 25px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 16px;
        color: white;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
    }

    .dashboard-header h2 {
        margin: 0;
        font-size: 2em;
        font-weight: 800;
        text-shadow: 0 2px 10px rgba(0,0,0,0.2);
    }

    .header-actions {
        display: flex;
        gap: 10px;
    }

    /* ============================================ */
    /* 🎨 RESPONSIVE */
    /* ============================================ */

    @media (max-width: 768px) {
        .stats-grid {
            grid-template-columns: 1fr;
        }

        .dashboard-header {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }

        .header-actions {
            flex-direction: column;
            width: 100%;
        }

        .header-actions .btn {
            width: 100%;
        }
    }

    /* ============================================ */
    /* 🎨 PRINT STYLES */
    /* ============================================ */

    @media print {
        .header-actions,
        .breadcrumb,
        button,
        .filter-buttons {
            display: none !important;
        }

        .section {
            page-break-inside: avoid;
            box-shadow: none;
            border: 1px solid #ddd;
        }

        .stat-card {
            box-shadow: none;
            border: 2px solid #667eea;
        }
    }
</style>

<div class="container">

    <!-- Breadcrumb Navigation -->
    <nav class="breadcrumb">
        <a href="/">📊 Dashboard</a>
        <span>/</span>
        <a href="/#tagsChart">Tags</a>
        <span>/</span>
        <span>{{ tag }}</span>
    </nav>

    <!-- Header -->
    <div class="dashboard-header">
        <h2>🏷️ Tag Analysis: <span class="tag">{{ tag }}</span></h2>
        <div class="header-actions">
            <button onclick="window.location.href='/'" class="btn btn-secondary">← Back</button>
            <button onclick="exportTagData()" class="btn btn-primary">📥 Export CSV</button>
            <button onclick="window.print()" class="btn btn-secondary">🖨️ Print</button>
        </div>
    </div>

    <!-- Overview Stats -->
    <div class="stats-grid">
        <div class="stat-card info">
            <div class="stat-icon">🧪</div>
            <div class="stat-content">
                <h3>{{ data.total_test_count }}</h3>
                <p>Unique Tests</p>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon">🔄</div>
            <div class="stat-content">
                <h3>{{ data.total_executions }}</h3>
                <p>Total Executions</p>
            </div>
        </div>
        <div class="stat-card {% if data.overall_pass_rate >= 80 %}success{% elif data.overall_pass_rate >= 50 %}warning{% else %}danger{% endif %}">
            <div class="stat-icon">📈</div>
            <div class="stat-content">
                <h3>{{ data.overall_pass_rate }}%</h3>
                <p>Overall Pass Rate</p>
            </div>
        </div>
        <div class="stat-card info">
            <div class="stat-icon">📊</div>
            <div class="stat-content">
                <h3>{{ data.total_runs }}</h3>
                <p>Runs with Tag</p>
            </div>
        </div>
        {% if data.flaky_count > 0 %}
            <div class="stat-card warning">
                <div class="stat-icon">⚠️</div>
                <div class="stat-content">
                    <h3>{{ data.flaky_count }}</h3>
                    <p>Flaky Tests</p>
                </div>
            </div>
        {% endif %}
    </div>

    <!-- Time Range Filter -->
    <div class="section" style="background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);">
        <div style="display: flex; gap: 15px; align-items: center; flex-wrap: wrap;">
            <label style="font-weight: 700; color: #667eea;">📅 Time Range:</label>
            <select id="timeRange" onchange="filterByTimeRange()" class="btn" style="min-width: 150px;">
                <option value="all">All Time</option>
                <option value="7">Last 7 days</option>
                <option value="14">Last 14 days</option>
                <option value="30">Last 30 days</option>
            </select>

            <label style="font-weight: 700; color: #667eea; margin-left: 20px;">🔢 Show Runs:</label>
            <select id="runLimit" onchange="filterByRunLimit()" class="btn" style="min-width: 150px;">
                <option value="10">Last 10 runs</option>
                <option value="20" selected>Last 20 runs</option>
                <option value="50">Last 50 runs</option>
                <option value="all">All runs</option>
            </select>

            <button onclick="resetFilters()" class="btn btn-secondary" style="margin-left: auto;">🔄 Reset</button>
        </div>
    </div>

    <!-- Pass Rate Trend Chart -->
    <div class="section">
        <h3>📈 Pass Rate History</h3>
        <div class="chart-container" style="height: 300px;">
            <canvas id="passRateHistoryChart"></canvas>
        </div>
    </div>

    <!-- Test Count Trend Chart -->
    <div class="section">
        <h3>📊 Test Execution Trend</h3>
        <div class="chart-container" style="height: 250px;">
            <canvas id="testCountChart"></canvas>
        </div>
    </div>

    <!-- Runs History Table -->
    <div class="section">
        <h3>📋 Run History</h3>
        <div class="table-container" id="runs-table">
            <table>
                <thead>
                <tr>
                    <th>Run ID</th>
                    <th>Timestamp</th>
                    <th>Suite</th>
                    <th>Tests</th>
                    <th>Pass Rate</th>
                    <th>Duration</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                {% for run in data.runs %}
                    <tr>
                        <td><code>{{ run.run_id[:12] }}</code></td>
                        <td>{{ run.timestamp }}</td>
                        <td>{{ run.suite_name }}</td>
                        <td><strong>{{ run.passed }}</strong>/{{ run.total }}</td>
                        <td>
                            <span class="badge {% if run.pass_rate >= 80 %}badge-success{% elif run.pass_rate >= 50 %}badge-warning{% else %}badge-danger{% endif %}">
                                {{ run.pass_rate }}%
                            </span>
                        </td>
                        <td>{{ "%.2f"|format(run.duration) }}s</td>
                        <td>
                            {% if run.failed == 0 %}
                                <span class="badge badge-success">✅ All Passed</span>
                            {% else %}
                                <span class="badge badge-danger">❌ {{ run.failed }} Failed</span>
                            {% endif %}
                        </td>
                        <td>
                            <a href="/run/{{ run.run_id }}" class="btn btn-sm btn-primary">View →</a>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <!-- Individual Test Performance -->
    <div class="section">
        <h3>🧪 Individual Test Performance</h3>

        <!-- Filter Options -->
        <div class="filter-buttons">
            <button onclick="filterTests('all')" class="btn btn-sm btn-primary" id="filter-all">All Tests</button>
            <button onclick="filterTests('flaky')" class="btn btn-sm" id="filter-flaky">⚠️ Flaky Only</button>
            <button onclick="filterTests('failing')" class="btn btn-sm" id="filter-failing">❌ Failing Only</button>
            <button onclick="filterTests('passing')" class="btn btn-sm" id="filter-passing">✅ Passing Only</button>
        </div>

        <div class="table-container" id="tests-table">
            <table>
                <thead>
                <tr>
                    <th>Test Name</th>
                    <th>Total Runs</th>
                    <th>Passed</th>
                    <th>Failed</th>
                    <th>Pass Rate</th>
                    <th>Avg Duration</th>
                    <th>Status</th>
                    <th>Last Failed</th>
                </tr>
                </thead>
                <tbody>
                {% for test in data.tests %}
                    <tr data-test-type="{% if test.is_flaky %}flaky{% elif test.failed == 0 %}passing{% else %}failing{% endif %}">
                        <td style="max-width: 300px; word-break: break-word; font-weight: 600;">{{ test.name }}</td>
                        <td><strong>{{ test.total_runs }}</strong></td>
                        <td><span class="badge badge-success">{{ test.passed }}</span></td>
                        <td><span class="badge badge-danger">{{ test.failed }}</span></td>
                        <td>
                            <span class="badge {% if test.pass_rate >= 80 %}badge-success{% elif test.pass_rate >= 50 %}badge-warning{% else %}badge-danger{% endif %}">
                                {{ test.pass_rate }}%
                            </span>
                        </td>
                        <td>{{ test.avg_duration }}s</td>
                        <td>
                            {% if test.is_flaky %}
                                <span class="badge badge-warning">⚠️ Flaky</span>
                            {% elif test.last_status == 'PASS' %}
                                <span class="badge badge-success">✅ Passing</span>
                            {% else %}
                                <span class="badge badge-danger">❌ Failing</span>
                            {% endif %}
                        </td>
                        <td>
                            {% if test.last_failed_run %}
                                <a href="/run/{{ test.last_failed_run }}" class="btn btn-sm btn-secondary">View →</a>
                            {% else %}
                                <span style="color: #11998e; font-weight: 700;">Never 🎉</span>
                            {% endif %}
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <!-- Comparison Tool -->
    <div class="comparison-tool">
        <h3 style="color: #667eea; margin-bottom: 15px;">🔍 Compare Runs</h3>
        <p style="color: #6b7280; margin-bottom: 20px; font-weight: 500;">Select two runs to compare their test results side-by-side</p>
        <div style="display: flex; gap: 15px; align-items: center; flex-wrap: wrap;">
            <select id="compareRun1" class="btn" style="min-width: 250px;">
                <option value="">Select first run...</option>
                {% for run in data.runs[:10] %}
                    <option value="{{ run.run_id }}">{{ run.run_id[:12] }} - {{ run.timestamp }} ({{ run.pass_rate }}%)</option>
                {% endfor %}
            </select>
            <span style="font-weight: 700; font-size: 1.5em; color: #667eea;">⚡</span>
            <select id="compareRun2" class="btn" style="min-width: 250px;">
                <option value="">Select<option value="">Select second run...</option>
                {% for run in data.runs[:10] %}
                    <option value="{{ run.run_id }}">{{ run.run_id[:12] }} - {{ run.timestamp }} ({{ run.pass_rate }}%)</option>
                {% endfor %}
            </select>
            <button onclick="compareRuns()" class="btn btn-primary">🔀 Compare</button>
        </div>
        <div id="comparison-result" style="margin-top: 20px;"></div>
    </div>

</div>
{% endblock %}

{% block extra_scripts %}
    <script>
        const tagName = "{{ tag }}";
        const allTests = {{ data.tests | tojson }};
        let charts = {};

        document.addEventListener('DOMContentLoaded', function() {
            loadCharts();
            initializeFilters();
        });

        async function loadCharts() {
            try {
                const response = await fetch(`/api/tag/${tagName}/history?limit=20`);
                const data = await response.json();

                createPassRateChart(data);
                createTestCountChart(data);
            } catch (error) {
                console.error('Error loading charts:', error);
            }
        }

        function createPassRateChart(data) {
            const ctx = document.getElementById('passRateHistoryChart');
            if (charts.passRate) charts.passRate.destroy();

            const gradient = ctx.getContext('2d').createLinearGradient(0, 0, 0, 300);
            gradient.addColorStop(0, 'rgba(102, 126, 234, 0.4)');
            gradient.addColorStop(1, 'rgba(118, 75, 162, 0.1)');

            charts.passRate = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.timestamps.map(t => formatTimestamp(t)),
                    datasets: [{
                        label: 'Pass Rate %',
                        data: data.pass_rates,
                        borderColor: '#667eea',
                        backgroundColor: gradient,
                        tension: 0.4,
                        fill: true,
                        pointRadius: 6,
                        pointHoverRadius: 10,
                        pointBackgroundColor: '#667eea',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 3,
                        pointHoverBackgroundColor: '#764ba2',
                        pointHoverBorderColor: '#fff',
                        borderWidth: 3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(102, 126, 234, 0.95)',
                            titleColor: '#fff',
                            bodyColor: '#fff',
                            borderColor: '#764ba2',
                            borderWidth: 2,
                            padding: 12,
                            displayColors: false,
                            callbacks: {
                                label: function(context) {
                                    return '✅ Pass Rate: ' + context.parsed.y + '%';
                                },
                                afterLabel: function(context) {
                                    const runId = data.run_ids[context.dataIndex];
                                    return '🔗 Click to view: ' + runId.substring(0, 12);
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            grid: {
                                color: 'rgba(102, 126, 234, 0.1)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                },
                                color: '#667eea',
                                font: { weight: 'bold' }
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(102, 126, 234, 0.1)'
                            },
                            ticks: {
                                color: '#667eea',
                                font: { weight: 'bold' }
                            }
                        }
                    },
                    onClick: (event, elements) => {
                        if (elements.length > 0) {
                            const index = elements[0].index;
                            const runId = data.run_ids[index];
                            window.location.href = `/run/${runId}`;
                        }
                    },
                    onHover: (event, chartElement) => {
                        event.native.target.style.cursor = chartElement[0] ? 'pointer' : 'default';
                    }
                }
            });
        }

        function createTestCountChart(data) {
            const ctx = document.getElementById('testCountChart');
            if (charts.testCount) charts.testCount.destroy();

            charts.testCount = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.timestamps.map(t => formatTimestamp(t)),
                    datasets: [{
                        label: 'Number of Tests',
                        data: data.test_counts,
                        backgroundColor: 'rgba(102, 126, 234, 0.8)',
                        borderColor: '#667eea',
                        borderWidth: 2,
                        borderRadius: 8,
                        hoverBackgroundColor: '#764ba2',
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(102, 126, 234, 0.95)',
                            titleColor: '#fff',
                            bodyColor: '#fff',
                            borderColor: '#764ba2',
                            borderWidth: 2,
                            padding: 12,
                            displayColors: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(102, 126, 234, 0.1)'
                            },
                            ticks: {
                                stepSize: 1,
                                color: '#667eea',
                                font: { weight: 'bold' }
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: '#667eea',
                                font: { weight: 'bold' }
                            }
                        }
                    }
                }
            });
        }

        function initializeFilters() {
            document.getElementById('filter-all').classList.add('btn-primary');
        }

        function filterTests(type) {
            // Update button states
            document.querySelectorAll('[id^="filter-"]').forEach(btn => {
                btn.classList.remove('btn-primary');
            });
            document.getElementById(`filter-${type}`).classList.add('btn-primary');

            // Filter table rows with animation
            const rows = document.querySelectorAll('#tests-table tbody tr');
            rows.forEach((row, index) => {
                const testType = row.getAttribute('data-test-type');
                if (type === 'all' || testType === type) {
                    setTimeout(() => {
                        row.style.display = '';
                        row.style.animation = 'fadeInUp 0.3s ease-out';
                    }, index * 30);
                } else {
                    row.style.display = 'none';
                }
            });
        }

        function filterByTimeRange() {
            const days = document.getElementById('timeRange').value;
            if (days === 'all') {
                location.reload();
                return;
            }

            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - parseInt(days));

            const rows = document.querySelectorAll('#runs-table tbody tr');
            rows.forEach(row => {
                const timestamp = row.cells[1].textContent;
                const rowDate = new Date(timestamp);
                row.style.display = rowDate >= cutoffDate ? '' : 'none';
            });
        }

        function filterByRunLimit() {
            const limit = document.getElementById('runLimit').value;
            const rows = document.querySelectorAll('#runs-table tbody tr');

            if (limit === 'all') {
                rows.forEach(row => row.style.display = '');
                return;
            }

            rows.forEach((row, index) => {
                row.style.display = index < parseInt(limit) ? '' : 'none';
            });
        }

        function resetFilters() {
            document.getElementById('timeRange').value = 'all';
            document.getElementById('runLimit').value = '20';
            filterByTimeRange();
            filterByRunLimit();
        }

        function exportTagData() {
            window.location.href = `/api/tag/${tagName}/export`;
        }

        async function compareRuns() {
            const run1 = document.getElementById('compareRun1').value;
            const run2 = document.getElementById('compareRun2').value;

            if (!run1 || !run2) {
                alert('⚠️ Please select two runs to compare');
                return;
            }

            if (run1 === run2) {
                alert('⚠️ Please select different runs');
                return;
            }

            const resultDiv = document.getElementById('comparison-result');
            resultDiv.innerHTML = '<p class="loading">Loading comparison</p>';

            try {
                const [data1, data2] = await Promise.all([
                    fetch(`/api/runs/${run1}`).then(r => r.json()),
                    fetch(`/api/runs/${run2}`).then(r => r.json())
                ]);

                // Filter tests by tag
                const tests1 = data1.tests.filter(t => t.tags.includes(tagName));
                const tests2 = data2.tests.filter(t => t.tags.includes(tagName));

                const passed1 = tests1.filter(t => t.status === 'PASS').length;
                const passed2 = tests2.filter(t => t.status === 'PASS').length;
                const total1 = tests1.length;
                const total2 = tests2.length;

                const passRate1 = (passed1 / total1 * 100).toFixed(2);
                const passRate2 = (passed2 / total2 * 100).toFixed(2);
                const diff = (passRate2 - passRate1).toFixed(2);

                const diffColor = diff > 0 ? '#11998e' : diff < 0 ? '#fa709a' : '#6b7280';
                const diffIcon = diff > 0 ? '📈' : diff < 0 ? '📉' : '➡️';
                const diffBg = diff > 0 ? 'rgba(17, 153, 142, 0.1)' : diff < 0 ? 'rgba(250, 112, 154, 0.1)' : 'rgba(107, 114, 128, 0.1)';

                let html = `
                <div style="background: white; padding: 30px; border-radius: 16px; margin-top: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); animation: fadeInUp 0.5s ease-out;">
                    <h4 style="margin-bottom: 25px; color: #667eea; font-size: 1.5em; font-weight: 700;">Comparison Results</h4>
                    <div style="display: grid; grid-template-columns: 1fr auto 1fr; gap: 30px; align-items: center;">
                        <div style="text-align: center; padding: 25px; background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%); border-radius: 16px; border: 2px solid #667eea;">
                            <div style="font-size: 0.9em; color: #667eea; margin-bottom: 10px; font-weight: 700; text-transform: uppercase;">Run 1</div>
                            <div style="font-size: 3em; font-weight: 900; color: #667eea; margin: 10px 0;">${passRate1}%</div>
                            <div style="margin-top: 10px; color: #6b7280; font-weight: 600;">${passed1}/${total1} passed</div>
                        </div>
                        <div style="font-size: 3em;">
                            ${diffIcon}
                        </div>
                        <div style="text-align: center; padding: 25px; background: linear-gradient(135deg, rgba(118, 75, 162, 0.1) 0%, rgba(102, 126, 234, 0.1) 100%); border-radius: 16px; border: 2px solid #764ba2;">
                            <div style="font-size: 0.9em; color: #764ba2; margin-bottom: 10px; font-weight: 700; text-transform: uppercase;">Run 2</div>
                            <div style="font-size: 3em; font-weight: 900; color: #764ba2; margin: 10px 0;">${passRate2}%</div>
                            <div style="margin-top: 10px; color: #6b7280; font-weight: 600;">${passed2}/${total2} passed</div>
                        </div>
                    </div>
                    <div style="text-align: center; margin-top: 30px; padding: 20px; background: ${diffBg}; border-radius: 16px; border: 2px solid ${diffColor};">
                        <strong style="color: #1f2937; font-size: 1.1em;">Difference:</strong>
                        <span style="font-size: 2em; font-weight: 900; color: ${diffColor}; margin-left: 10px;">
                            ${diff > 0 ? '+' : ''}${diff}%
                        </span>
                    </div>
                </div>
            `;

                resultDiv.innerHTML = html;

            } catch (error) {
                console.error('Error comparing runs:', error);
                resultDiv.innerHTML = '<p style="color: #ef4444; text-align: center; padding: 20px; font-weight: 600;">❌ Error loading comparison data</p>';
            }
        }

        function formatTimestamp(timestamp) {
            if (!timestamp) return '-';

            try {
                const date = new Date(timestamp);
                if (isNaN(date.getTime())) return timestamp;

                return date.toLocaleString('bg-BG', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            } catch (error) {
                console.error('Error parsing timestamp:', timestamp, error);
                return timestamp;
            }
        }
    </script>
{% endblock %}