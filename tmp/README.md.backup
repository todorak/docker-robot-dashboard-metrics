A powerful, production-ready metrics dashboard for Robot Framework test automation with advanced analytics, beautiful visualizations, and comprehensive API.

📋 Table of Contents

Features
Quick Start
Architecture
Installation
Configuration
Usage
API Documentation
Screenshots
Advanced Features
Troubleshooting
Contributing
License


✨ Features
📊 Dashboard & Analytics

Real-time Metrics - Live test execution statistics
Trend Analysis - Pass rate and duration trends over time
Test Distribution - Visual breakdown of passed/failed/skipped tests
Tag-based Analytics - Performance tracking by test tags
Flaky Test Detection - Identify unstable tests automatically
Slowest Tests - Performance bottleneck identification

🏷️ Tag Analysis

Dedicated Tag Pages - Deep dive into specific tag performance
Historical Tracking - Track tag performance across multiple runs
Run Comparison - Side-by-side comparison of test runs
CSV Export - Download tag data for external analysis
Individual Test Performance - Per-test statistics and history

📈 Advanced Visualizations

Interactive Charts - Click to drill down into details
Time Range Filters - Analyze specific time periods
Status Filtering - Filter by PASS/FAIL/SKIP status
Gradient Styling - Beautiful, modern UI with animations

🔌 REST API

Comprehensive API - Full programmatic access to metrics
Interactive Documentation - Built-in API explorer with try-it-out
JSON Responses - Easy integration with CI/CD pipelines
Data Export - CSV export for external tools

🚀 Production Ready

Docker-based - Easy deployment with docker-compose
Multi-architecture - AMD64/ARM64 support
Persistent Storage - Historical data preservation
Health Checks - Built-in monitoring endpoints
Scalable - Handle large test suites efficiently

 Quick Start
Get up and running in 5 minutes!
Prerequisites

Docker & Docker Compose
2GB free disk space
Port 5000 available

1. Clone the Repository
bashgit clone <your-repo-url>
cd robot-framework-metrics
2. Start the Services
bashdocker-compose up -d
3. Run Your Tests
bash# Run tests (example)
docker-compose run --rm robot robot --outputdir /robot_results /robot_src/tests/

4. View Dashboard
Open your browser: http://localhost:5000
That's it! 🎉

🏗️ Architecture
┌─────────────────────────────────────────────────────────────┐
│                    Metrics Dashboard                        │
│  ┌─────────────┐  ┌──────────────┐  ┌─────────────────┐     │
│  │  Dashboard  │  │ Tag Analysis │  │  API Docs       │     │
│  │   (Home)    │  │   Pages      │  │  /api-docs      │     │
│  └─────────────┘  └──────────────┘  └─────────────────┘     │
│         │                  │                   │            │
│         └──────────────────┴───────────────────┘            │
│                            │                                │
│                    ┌───────▼────────┐                       │
│                    │   Flask API    │                       │
│                    │   (app.py)     │                       │
│                    └───────┬────────┘                       │
│                            │                                │
│                    ┌───────▼────────┐                       │
│                    │ Metrics Parser │                       │
│                    │(metrics_parser)│                       │
│                    └───────┬────────┘                       │
│                            │                                │
└────────────────────────────┼────────────────────────────────┘
                             │
                    ┌────────▼─────────┐
                    │  Robot Framework │
                    │   output.xml     │
                    └──────────────────┘
                             │
                    ┌────────▼─────────┐
                    │  Historical Data │
                    │   (JSON files)   │
                    └──────────────────┘
Components
Metrics Service:

Flask web server
RESTful API
Jinja2 templates
Chart.js visualizations

Metrics Parser:

Robot Framework XML parsing
Test result aggregation
Historical data management
Flaky test detection

Data Storage:

JSON-based persistence
Run history tracking
Incremental updates


📦 Installation
Method 1: Docker Compose (Recommended)
1. Project Structure
bashmkdir robot-framework-metrics && cd robot-framework-metrics

# Create directory structure
mkdir -p {metrics-service/{templates,static},robot/tests,data/{history}}

# Set permissions
chmod -R 755 data/
2. Environment Variables
Create .env file:
bash# Metrics Service
METRICS_PORT=5000
METRICS_DATA_DIR=/app/data
ROBOT_RESULTS_DIR=/robot_results

# Robot Framework
ROBOT_THREADS=6
BROWSER=headlesschrome
3. Docker Compose
Create docker-compose.yml:
yamlversion: "3.8"

services:
  metrics:
    build:
      context: .
      dockerfile: ./metrics-service/Dockerfile
    container_name: metrics_dashboard
    ports:
      - "5000:5000"
    volumes:
      - ./data:/app/data
      - ./robot-results:/robot_results:ro
    environment:
      - METRICS_DATA_DIR=/app/data
      - ROBOT_RESULTS_DIR=/robot_results
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  robot:
    image: your-robot-image:latest
    container_name: robot_tests
    volumes:
      - ./robot:/robot_src:ro
      - ./robot-results:/robot_results
    command: ["robot", "--outputdir", "/robot_results", "/robot_src/tests"]
4. Build & Run
bash# Build images
docker-compose build

# Start services
docker-compose up -d

# Check status
docker-compose ps

# View logs
docker-compose logs -f metrics
Method 2: Manual Installation
bash# Install Python dependencies
cd metrics-service
pip install -r requirements.txt

# Set environment variables
export METRICS_DATA_DIR=/path/to/data
export ROBOT_RESULTS_DIR=/path/to/robot/results

# Run application
python app.py

⚙️ Configuration
Environment Variables
VariableDefaultDescriptionMETRICS_PORT5000Web server portMETRICS_DATA_DIR/app/dataHistorical data storageROBOT_RESULTS_DIR/robot_resultsRobot Framework output directoryCHECK_INTERVAL10Output.xml check interval (seconds)KEEP_HISTORYtrueEnable historical data retention
Directory Structure
robot-framework-metrics/
├── metrics-service/
│   ├── app.py                  # Flask application
│   ├── metrics_parser.py       # XML parser & analytics
│   ├── templates/              # HTML templates
│   │   ├── base.html
│   │   ├── dashboard.html
│   │   ├── tag_analysis.html
│   │   ├── run_details.html
│   │   └── api_docs.html
│   ├── static/                 # Static assets
│   ├── Dockerfile
│   └── requirements.txt
├── robot/
│   ├── tests/                  # Robot Framework tests
│   └── resources/              # Test resources
├── data/
│   └── history/                # Historical run data (JSON)
├── robot-results/              # Robot Framework outputs
│   ├── output.xml
│   ├── log.html
│   └── report.html
├── docker-compose.yml
├── .env
└── README.md

🎯 Usage
Running Tests
bash# Run all tests
docker-compose run --rm robot robot --outputdir /robot_results /robot_src/tests/

# Run specific tags
docker-compose run --rm robot robot --include smoke --outputdir /robot_results /robot_src/tests/

# Run with variables
docker-compose run --rm robot robot --variable BROWSER:chrome --outputdir /robot_results /robot_src/tests/
Accessing the Dashboard

Main Dashboard: http://localhost:5000

Overview statistics
Trend charts
Recent runs
Flaky tests


Tag Analysis: http://localhost:5000/tag/{tag_name}

Tag-specific metrics
Historical performance
Run comparison


Run Details: http://localhost:5000/run/{run_id}

Individual test results
Suite breakdown
Tag statistics


API Documentation: http://localhost:5000/api-docs

Interactive API explorer
Request/response examples
Try-it-out functionality


Robot Reports:

HTML Report: http://localhost:5000/robot-report
HTML Log: http://localhost:5000/robot-log



Using the API
Get Status
bashcurl http://localhost:5000/api/status
Get All Runs
bashcurl http://localhost:5000/api/runs?limit=10
Get Run Details
bashcurl http://localhost:5000/api/runs/{run_id}
Get Trends
bashcurl http://localhost:5000/api/trends?runs=20
Get Tag Statistics
bashcurl http://localhost:5000/api/tag-stats
Export Tag Data
bashcurl http://localhost:5000/api/tag/smoke/export -o smoke_tests.csv
Force Parse Results
bashcurl -X POST http://localhost:5000/api/parse
For complete API documentation, visit: http://localhost:5000/api-docs

📚 API Documentation
The dashboard includes comprehensive, interactive API documentation accessible at /api-docs.
API Categories
General Endpoints

GET /health - Health check
GET /api/status - Service status

Test Runs

GET /api/runs - List all runs
GET /api/runs/{run_id} - Run details
DELETE /api/delete/{run_id} - Delete run

Analytics

GET /api/trends - Trend data
GET /api/flaky-tests - Flaky test detection
GET /api/slowest-tests - Performance analysis
GET /api/compare - Compare runs

Tags

GET /api/tag-stats - Tag statistics
GET /api/tag/{tag} - Tag details
GET /api/tag/{tag}/history - Tag history
GET /api/tag/{tag}/export - Export CSV

Data Management

POST /api/parse - Force parse
POST /api/clear - Clear history

Response Format
All API responses follow this format:
json{
  "status": "success",
  "data": { ... },
  "timestamp": "2025-10-10T00:00:00"
}
Error responses:
json{
  "error": "Description of error",
  "status_code": 404
}

🚀 Advanced Features
Flaky Test Detection
The dashboard automatically identifies flaky tests - tests that fail intermittently:

Analyzes last N runs (configurable)
Calculates fail rate for each test
Highlights unstable tests
Provides historical context

Algorithm:
pythonflaky_threshold = 0.1  # 10% fail rate
if 0 < fail_rate < (1 - flaky_threshold):
    mark_as_flaky(test)
Tag-based Analysis
Deep dive into test performance by tags:

Aggregate Statistics - Overall pass rate, duration
Run History - Performance across multiple runs
Individual Tests - Per-test metrics
Comparison - Compare different runs
Export - CSV download for external analysis

Run Comparison
Compare two test runs side-by-side:
javascript// Example comparison
{
  "run1": { "pass_rate": 87.5, "total": 8 },
  "run2": { "pass_rate": 100, "total": 8 },
  "difference": { "pass_rate": +12.5 }
}
Filtering & Search
Multiple filtering options:

By Status - PASS/FAIL/SKIP
By Tag - Filter tests by tags
By Time Range - Last 7/14/30 days
By Run Count - Last 10/20/50 runs

Data Export
Export data in multiple formats:

CSV - Tag analysis, test results
JSON - API responses
HTML - Robot Framework reports


🔧 Troubleshooting
Common Issues
1. Dashboard shows no data
Problem: Empty dashboard after running tests
Solution:
bash# Check if output.xml exists
ls -la robot-results/output.xml

# Manually trigger parse
curl -X POST http://localhost:5000/api/parse

# Check logs
docker-compose logs metrics
2. Port already in use
Problem: Port 5000 already in use
Solution:
bash# Change port in .env
echo "METRICS_PORT=5001" >> .env

# Restart
docker-compose down
docker-compose up -d
3. Permission denied errors
Problem: Cannot write to data directory
Solution:
bash# Fix permissions
sudo chown -R $USER:$USER data/
chmod -R 755 data/

# Restart service
docker-compose restart metrics
4. Output.xml not being parsed
Problem: Tests run but dashboard doesn't update
Solution:
bash# Check file permissions
ls -la robot-results/output.xml

# Check volume mounts
docker-compose exec metrics ls -la /robot_results/

# Force parse
curl -X POST http://localhost:5000/api/parse
5. Charts not displaying
Problem: Dashboard loads but charts are empty
Solution:
bash# Check browser console for errors
# Clear browser cache
# Verify data exists
curl http://localhost:5000/api/trends
Debug Mode
Enable debug logging:
python# In app.py
app.config['DEBUG'] = True

# Or via environment
export FLASK_DEBUG=1
Health Checks
bash# Service health
curl http://localhost:5000/health

# API status
curl http://localhost:5000/api/status

# Container status
docker-compose ps
docker-compose logs metrics

📝 Changelog
See CHANGELOG.md for detailed version history.
Latest Version
v1.0.0 (2025-10-10)

Initial release
Dashboard with analytics
Tag analysis pages
API documentation
Docker support


📄 License
This project is licensed under the MIT License - see the LICENSE file for details.

👥 Authors

Sunday Natural Products GmbH - Initial work


🙏 Acknowledgments

Robot Framework - Test automation framework
Flask - Web framework
Chart.js - Charting library
Docker - Containerization


📞 Support

Documentation: http://localhost:5000/api-docs
Issues: Create an issue in the repository
Email: support@sunday.de


🗺️ Roadmap
Planned Features

 Dark mode toggle
 Suite analysis pages
 Real-time WebSocket updates
 Advanced search functionality
 PDF report generation
 Email notifications for failures
 Integration with CI/CD platforms
 Custom themes
 Multi-project support
 User authentication

